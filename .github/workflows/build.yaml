name: Build

on: [push, pull_request]

jobs:
  build_wheels:

    env:
      CIBW_BEFORE_ALL_LINUX: curl -sSf https://sh.rustup.rs | sh -s -- -y
      CIBW_BEFORE_ALL_WINDOWS: rustup target add i686-pc-windows-msvc
      CIBW_ENVIRONMENT_LINUX: "PATH=$HOME/.cargo/bin:$PATH"
      # Use delvewheel on windows
      CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
      CIBW_TEST_REQUIRES: tox
      CIBW_TEST_COMMAND: "tox -e py --installpkg {wheel}"
      # Skip CPython 3.6 and CPython 3.7
      CIBW_SKIP: cp36-* cp37-*

      # If you need to set DYLD_LIBRARY_PATH for MacOS, uncomment these lines and
      #  specify the library location in `REPAIR_LIBRARY_PATH` :

      # REPAIR_LIBRARY_PATH: "/path/to/lib"
      # CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
    #   DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}

    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.19.2

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl


  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  release:
    needs: [build_wheels, make_sdist]
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - run: pip install -U twine


      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          merge-multiple: true
          path: dist

      - run: twine check --strict dist/*

      - name: Release PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Release GitHub
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
